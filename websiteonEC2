Change into the Terraform working directory called infra:


cd infra
 

2. List the resources currently managed by Terraform:


terraform state list


There is a VPC, two subnets, and two instances. The subnets are private, i.e. they don't have a route to the internet. The instances are running the Apache web server and a default web page is being served.

 

3. Remove the current instance configuration in the main.tf file:


sed -i '/.*aws_instance.*/,$d' main.tf
This command deletes all the lines from the file starting from the line matching aws_instance. The instance configuration is the last block in the file so all the other configuration is preserved.

 

4. Append the following resource block to configure the instances to serve a custom website that echoes back the instance's ID:


cat >> main.tf <<'EOF'
resource "aws_instance" "web" {
  count         = "${var.instance_count}"
  # lookup returns a map value for a given key
  ami           = "${lookup(var.ami_ids, "us-west-2")}"
  instance_type = "t2.micro"
  # Use the subnet ids as an array and evenly distribute instances
  subnet_id     = "${element(aws_subnet.web_subnet.*.id, count.index % length(aws_subnet.web_subnet.*.id))}"
  
  # Use instance user_data to serve the custom website
  user_data     = "${file("user_data.sh")}"
  
  tags {
    Name = "Web Server ${count.index + 1}"
  }
}

EOF
The configuration uses user_data to bootstrap the instances to serve a custom website. The file built-in interpolation function reads the contents of the file into a string. This keeps the resource block clean by keeping the bootstrapping commands in a separate file that you will create next. Terraform also supports provisioners which also run commands when a remote machine is created. Provisioners are ideal for initializing configuration management tools like Chef. User data is sufficient for the relatively simple bootstrapping required for this Lab. It also has the benefit of being retrievable from within AWS.

 

5. Create the user_data.sh script that will create and serve the custom website:

cat >> user_data.sh <<'EOF'
#!/bin/bash
cat > /var/www/html/index.php <<'END'
<?php
$instance_id = file_get_contents("http://instance-data/latest/meta-data/instance-id");
echo "You've reached instance ", $instance_id, "\n";
?>
END
EOF
The script creates a file called index.php in the default serving directory of the Apache web server. The PHP code gets the instance ID from the instance's metadata and echoes it back to the user.

 

6. View the execution plan for the configuration change, and enter yes when prompted:

terraform apply


The plan tells you that Terraform must destroy and then create replacement instances. This is because the user_data must be executed when an instance is first launched. Many changes to instance configuration don't require recreation. Terraform would notify you of an update in-place in the execution plan when recreation isn't required. The operation should complete in under one minute.
