Create the required networking resources for public subnets in a configuration file named networking.tf:


cat > networking.tf <<'EOF'
# Internet gateway to reach the internet
resource "aws_internet_gateway" "web_igw" {
  vpc_id = "${aws_vpc.web_vpc.id}"
}

# Route table with a route to the internet
resource "aws_route_table" "public_rt" {
  vpc_id = "${aws_vpc.web_vpc.id}"
  
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = "${aws_internet_gateway.web_igw.id}"
  }

  tags {
    Name = "Public Subnet Route Table"
  }
}

# Subnets with routes to the internet
resource "aws_subnet" "public_subnet" {
  # Use the count meta-parameter to create multiple copies
  count             = 2
  vpc_id            = "${aws_vpc.web_vpc.id}"
  cidr_block        = "${cidrsubnet(var.network_cidr, 2, count.index + 2)}"
  availability_zone = "${element(var.availability_zones, count.index)}"

  tags {
    Name = "Public Subnet ${count.index + 1}"
  }
}

# Associate public route table with the public subnets
resource "aws_route_table_association" "public_subnet_rta" {
  count          = 2
  subnet_id      = "${aws_subnet.public_subnet.*.id[count.index]}"
  route_table_id = "${aws_route_table.public_rt.id}"
}

EOF
 The VPC for the website deployment is named web_vpc, and the availability zones of the two instances are stored in a list variable named availability_zones in the variables.tf file.

 

2. Execute the plan to create the networking resources:


terraform apply


3. Create the security groups that will secure traffic into the public and private subnets in a configuration file called security.tf:


cat > security.tf <<'EOF'
resource "aws_security_group" "elb_sg" {
  name        = "ELB Security Group"
  description = "Allow incoming HTTP traffic from the internet"
  vpc_id      = "${aws_vpc.web_vpc.id}"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Allow all outbound traffic
  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group" "web_sg" {
  name        = "Web Server Security Group"
  description = "Allow HTTP traffic from ELB security group"
  vpc_id      = "${aws_vpc.web_vpc.id}"

  # HTTP access from the VPC
  ingress {
    from_port       = 80
    to_port         = 80
    protocol        = "tcp"
    security_groups = ["${aws_security_group.elb_sg.id}"]
  }

  # Allow all outbound traffic
  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

EOF
 For simplicity, the egress rules for both security groups allow outbound traffic to anywhere.

 

4. Apply the configuration changes to create the security groups:


terraform apply


The plan only takes a few seconds to apply.

 

5. Remove the current instance configuration in the main.tf file so you can modify the configuration to attach the web server security group to them:


sed -i '/.*aws_instance.*/,$d' main.tf
 

6. Append the following resource block to configure the instances to serve a custom website that echoes back the instance's ID:


cat >> main.tf <<'EOF'
resource "aws_instance" "web" {
  count                  = "${var.instance_count}"
  # lookup returns a map value for a given key
  ami                    = "${lookup(var.ami_ids, "us-west-2")}"
  instance_type          = "t2.micro"
  # Use the subnet ids as an array and evenly distribute instances
  subnet_id              = "${element(aws_subnet.web_subnet.*.id, count.index % length(aws_subnet.web_subnet.*.id))}"
  
  # Use instance user_data to serve the custom website
  user_data              = "${file("user_data.sh")}"
  
  # Attach the web server security group
  vpc_security_group_ids = ["${aws_security_group.web_sg.id}"]

  tags { 
    Name = "Web Server ${count.index + 1}" 
  }
}

EOF
The only difference from the previous configuration is the addition of vpc_security_group_ids.

 

7. Apply the configuration change:


terraform apply


This change doesn't require recreation and an update in-place can be performed.
